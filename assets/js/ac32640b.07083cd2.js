"use strict";(self.webpackChunkframework_docs=self.webpackChunkframework_docs||[]).push([[1260],{315:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var n=a(4848),d=a(8453);const t={sidebar_position:21,description:"Leaderboards."},o="\ud83d\udcca Leaderboard",s={id:"Server/Leaderboard",title:"\ud83d\udcca Leaderboard",description:"Leaderboards.",source:"@site/docs/Server/Leaderboard.md",sourceDirName:"Server",slug:"/Server/Leaderboard",permalink:"/simulator-framework-documentation/docs/Server/Leaderboard",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Server/Leaderboard.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21,description:"Leaderboards."},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udf0d Worlds",permalink:"/simulator-framework-documentation/docs/Server/Worlds"},next:{title:"\ud83d\udcc8 Analytics",permalink:"/simulator-framework-documentation/docs/Server/GameAnalytics"}},i={},l=[{value:"Get",id:"get",level:2},{value:"GetServerLeaderboard",id:"getserverleaderboard",level:3},{value:"GetStored",id:"getstored",level:3},{value:"Initialise",id:"initialise",level:3},{value:"Store",id:"store",level:3},{value:"GetRankings",id:"getrankings",level:3},{value:"BindToUpdate",id:"bindtoupdate",level:3}];function c(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"-leaderboard",children:"\ud83d\udcca Leaderboard"}),"\n",(0,n.jsx)(r.p,{children:"Leaderboard module to create leaderboards for currencies made in the game."}),"\n",(0,n.jsx)(r.h2,{id:"get",children:"Get"}),"\n",(0,n.jsxs)(r.p,{children:["This function either creates a new leaderboard, if one with the currency does not already exist, ",(0,n.jsx)(r.em,{children:"or"}),", it returns the class for the already existing leaderboard."]}),"\n",(0,n.jsx)(r.p,{children:"Class being the metatable holding all methods to interact with the leaderboard."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:'local Framework = require(path).GetServer()\r\nlocal Leaderboard = Framework.Leaderboard\r\n\r\nlocal WinsLeaderboard = Leaderboard.Get("Wins") -- Takes in the currency as first parameter.\n'})}),"\n",(0,n.jsx)(r.h3,{id:"getserverleaderboard",children:"GetServerLeaderboard"}),"\n",(0,n.jsx)(r.p,{children:"Returns all of the players on the leaderboard that are in the current server."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:"WinsLeaderboard:GetServerLeaderboard()\n"})}),"\n",(0,n.jsx)(r.h3,{id:"getstored",children:"GetStored"}),"\n",(0,n.jsxs)(r.p,{children:["Returns ",(0,n.jsx)(r.strong,{children:"every"})," player on the leaderboard."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:"WinsLeaderboard:GetStored()\n"})}),"\n",(0,n.jsx)(r.h3,{id:"initialise",children:"Initialise"}),"\n",(0,n.jsx)(r.p,{children:"Initialises the update loop to update the leaderboard data."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:"WinsLeaderboard:Initialise()\n"})}),"\n",(0,n.jsx)(r.h3,{id:"store",children:"Store"}),"\n",(0,n.jsx)(r.p,{children:"Adds new data to the leaderboard from a table."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:"local newUsers = {\r\n    [213106169] = 100,\r\n    [213106169] = 100,\r\n    [213106169] = 100,\r\n}\r\n\r\nWinsLeaderboard:Store(newUsers)\n"})}),"\n",(0,n.jsx)(r.h3,{id:"getrankings",children:"GetRankings"}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["When interacting with the leaderboard, it's better to use this to get the current players on the leaderboard as it returns a cached table, avoiding the use of ",(0,n.jsx)(r.code,{children:"GetAsync"})," and yielding, unless you use promises for the asynchronous operations support."]})}),"\n",(0,n.jsx)(r.p,{children:"Retrieves a cached table of all the current players on the leaderboard."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:"WinsLeaderboard:GetRankings()\n"})}),"\n",(0,n.jsx)(r.h3,{id:"bindtoupdate",children:"BindToUpdate"}),"\n",(0,n.jsx)(r.p,{children:"Asigns a function to be called once the leaderboard updates."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-lua",children:'local WinsLeaderboard = Leaderboard:Get("Wins")\r\n\r\nfunction leaderboardUpdated(rankings)\r\n    for i, v in rankings do\r\n        print(`{i}: {v}`)\r\n    end\r\nend\r\n\r\nWinsLeaderboard:BindToUpdate(leaderboardUpdated)\n'})})]})}function h(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,r,a)=>{a.d(r,{R:()=>o,x:()=>s});var n=a(6540);const d={},t=n.createContext(d);function o(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);